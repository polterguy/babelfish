
/*
 * Inserts a new translation entity, translating it to all supported languages in the process
 * if caller requests it.
 */
.arguments
   id:string
   locale:string
   content:string
   translate:bool


/*
 * Meta information.
 */
.description:Inserts a new translation entity into your database, and translates it into all supported languages in the process.
.type:crud-create


/*
 * Making sure only authorised users have access to invoke endpoint.
 */
auth.ticket.verify:root, admin, translator


/*
 * Connecting to database.
 */
data.connect:[generic|babelfish]


   /*
    * Checking if item already exists.
    */
   data.read
      table:translations
      columns
         count(*)
            as:count
      where
         and
            id.eq:x:@.arguments/*/id
            locale.eq:x:@.arguments/*/locale
   if
      mt
         convert:x:@data.read/*/*
            type:int
         .:int:0
      .lambda
         strings.concat
            .:"Item with id of '"
            get-value:x:@.arguments/*/id
            .:"' already exists for locale '"
            get-value:x:@.arguments/*/locale
            .:"'"
         throw:x:-
            public:true
            status:400


   /*
    * Inserting item as specified by caller.
    */
   add:x:+/*/values
      get-nodes:x:@.arguments/*/id
      get-nodes:x:@.arguments/*/locale
      get-nodes:x:@.arguments/*/content
   data.create
      table:translations
      return-id:bool:false
      values


   /*
    * Checking if caller wants to translate entity.
    */
   if
      get-value:x:@.arguments/*/translate
      .lambda


         /*
          * This is where we duplicate our entry.
          * First we retrieve all languages we support, except locale specified by caller.
          */
         data.read
            table:languages
            columns
               locale
            where
               and
                  locale.neq:x:@.arguments/*/locale


         /*
          * Then we iterate over all languages as retrieved from above [data.read] invocation.
          */
         for-each:x:@data.read/*


            /*
             * Making sure item is not already translated for currently iterated language.
             */
            data.read
               table:translations
               columns
                  count(*)
                     as:count
               where
                  and
                     id.eq:x:@.arguments/*/id
                     locale.eq:x:@.dp/#/*/locale
            if
               eq
                  convert:x:@data.read/*/*
                     type:int
                  .:int:0
               .lambda

                  /*
                   * Item has not been translated for currently iterated language.
                   * Hence, invoking Google Translate, and injecting default translation entity
                   * as returned from Google Translate.
                   *
                   * Notice, Google Translate will return jibberish for some languages,
                   * hence we need to accommodate for that, by making sure we trap JSON
                   * parsing exceptions.
                   */
                  try
                     unwrap:x:+/*
                     signal:magic.google.translate
                        text:x:@.arguments/*/content
                        src-lang:x:@.arguments/*/locale
                        dest-lang:x:@.dp/#/*/locale


                     /*
                      * Making sure Google Translate actually returned something
                      * before attempting to insert item.
                      */
                     if
                        and
                           not
                              eq
                                 get-value:x:@signal
                                 .:
                           not
                              eq
                                 get-value:x:@signal
                                 .
                        .lambda


                           /*
                            * Google Translate returned something.
                            */
                           data.create
                              table:translations
                              values
                                 id:x:@.arguments/*/id
                                 locale:x:@.dp/#/*/locale
                                 content:x:@signal
                  .catch

                     /*
                      * Google Translate failed for some reasons. Inserting bogus item,
                      * and creating a log entry.
                      */
                     log.error
                        .:"Couldn't translate entity for language '"
                        get-value:x:@.dp/#/*/locale
                        .:"', error occurring was '"
                        get-value:x:@.arguments/*/message
                        .:"'"


                     /*
                      * Google Translate returned something.
                      */
                     data.create
                        table:translations
                        values
                           id:x:../*/.arguments/*/id
                           locale:x:@.dp/#/*/locale
                           content:'?????'


   /*
    * Returning success to caller.
    */
   response.status.set:201
   unwrap:x:+/*
   return
      result:success
